version: '2'
services:
    db:
        build:
          context: ../services/docker
          dockerfile: extended-postgres.dockerfile
        image: capstone-postgres:0.1
        environment:
            POSTGRES_PASSWORD: password
        volumes:
          - db_data:/var/lib/postgresql/data:delegated
    redis:
        image: redis:4
#    rabbit:
#        # see https://github.com/dockerfile/rabbitmq/issues/22 if this should be persistent
#        hostname: rabbit
#        image: rabbitmq:latest
#        environment:
#            - RABBITMQ_DEFAULT_USER=admin
#            - RABBITMQ_DEFAULT_PASS=mypass
##        mem_limit: 128M
    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:6.8.0
        environment:
          - node.name=es01
          - bootstrap.memory_lock=true
          - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m"
        ulimits:
          memlock:
            soft: -1
            hard: -1
        volumes:
          - esdata01:/usr/share/elasticsearch/data
        ports:
          - 9200:9200
    worker:
        build: .
        image: capstone:0.3.10-92cfc21f508605b99085e06ddafff24e
        volumes:
            # NAMED VOLUMES
            # Use a named, persistent volume so that the node_modules directory,
            # which is created during the image's build process, and which our
            # code presently expects to be nested inside the /app directory,
            # isn't wiped out when mounting our code.
            - node_modules:/app/node_modules:delegated
            # Use a delegated volume for this instance's redis (used by tests)
            # to hopefully smooth I/O performance issues. Necessary?
            - test_redis:/var/lib/redis:delegated
            # MOUNTS
            - .:/app
            - ../services:/services

        depends_on:
            - redis
            - db
        command: celery -A config worker --concurrency=4 --loglevel=info
        environment:
            # let Django load Docker-specific settings conditionally
            - DOCKERIZED=True
        extra_hosts:
          - "case.test:127.0.0.1"
          - "api.case.test:127.0.0.1"
    web:
        build: .
        image: capstone:0.3.10-92cfc21f508605b99085e06ddafff24e
        volumes:
            # NAMED VOLUMES
            - node_modules:/app/node_modules:delegated
            - test_redis:/var/lib/redis:delegated
            # MOUNTS
            - .:/app
            - ../services:/services
        depends_on:
            - redis
            - db
        command: fab run:0.0.0.0:8000
        environment:
            # let Django load Docker-specific settings conditionally
            - DOCKERIZED=True
        extra_hosts:
          - "case.test:127.0.0.1"
          - "api.case.test:127.0.0.1"
        ports:
            - "8000:8000"
#        mem_limit: 128M

volumes:
    db_data:
    node_modules:
    test_redis:
    esdata01:
      driver: local
